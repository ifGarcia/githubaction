name: Deploy

on: [push, workflow_dispatch]

jobs:
  # deploy:
  #   runs-on: ubuntu-latest
  #   # environment: production

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Create GitHub deployment
  #       id: create_deployment
  #       run: |
  #         curl -X POST \
  #           -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
  #           -H "Accept: application/vnd.github.v3+json" \
  #           https://api.github.com/repos/${{ github.repository }}/deployments \
  #           -d '{
  #             "ref": "${{ github.sha }}",
  #             "environment": "production",
  #             "required_contexts": []
  #           }'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Get deployment ID
  #       id: get_deployment_id
  #       run: |
  #         DEPLOYMENT_ID=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
  #           -H "Accept: application/vnd.github.v3+json" \
  #           https://api.github.com/repos/${{ github.repository }}/deployments \
  #           | jq '.[0].id')
  #         echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Deploy application
  #       run: |
  #         # Seu código de deployment aqui

  #     - name: Update deployment status (success)
  #       if: success()
  #       run: |
  #         curl -X POST \
  #           -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
  #           -H "Accept: application/vnd.github.v3+json" \
  #           https://api.github.com/repos/${{ github.repository }}/deployments/${{ env.DEPLOYMENT_ID }}/statuses \
  #           -d '{
  #             "state": "success",
  #             "description": "Deployment concluído com sucesso",
  #             "environment": "production"
  #           }'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         DEPLOYMENT_ID: ${{ env.DEPLOYMENT_ID }}

  #     - name: Update deployment status (failure)
  #       if: failure()
  #       run: |
  #         curl -X POST \
  #           -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
  #           -H "Accept: application/vnd.github.v3+json" \
  #           https://api.github.com/repos/${{ github.repository }}/deployments/${{ env.DEPLOYMENT_ID }}/statuses \
  #           -d '{
  #             "state": "failure",
  #             "description": "Falha no deployment",
  #             "environment": "production"
  #           }'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         DEPLOYMENT_ID: ${{ env.DEPLOYMENT_ID }}
  
  list-successful-deployments:
    runs-on: ubuntu-latest
    steps:
      - name: List successful deployments
        run: |
          echo "Ambientes e seus deployments bem-sucedidos:"
          for env in production staging development; do
            echo "Ambiente: $env"
            successful_deployment=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/deployments?environment=$env \
              | jq -r '.[] | select(.statuses_url | contains("success")) | {id: .id, sha: .sha, description: .description}')
            if [ -n "$successful_deployment" ]; then
              echo "$successful_deployment" | jq -r '"ID: \(.id), SHA: \(.sha), Descrição: \(.description)"'
            else
              echo "Nenhum deployment bem-sucedido encontrado."
            fi
            echo ""
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
