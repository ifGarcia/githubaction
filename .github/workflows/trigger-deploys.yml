name: Trigger Deploys

on:
  workflow_dispatch:

jobs:
  trigger:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sistema: [sistema-a, sistema-b, sistema-c]

    steps:
      - name: Disparar deploy via repository_dispatch
        id: trigger
        run: |
          start_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "start_time=$start_time" >> $GITHUB_OUTPUT

          echo "Disparando deploy para ${{ matrix.sistema }}..."

          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type":"start-deploy", "client_payload": {"sistema": "${{ matrix.sistema }}"}}'

          echo "Aguardando 10s para o deploy aparecer..."
          sleep 20
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Encontrar run_id do deploy correspondente
        id: encontrar
        run: |
          echo "Buscando run_id do deploy para ${{ matrix.sistema }} iniciado após ${{ steps.trigger.outputs.start_time }}"

          run_id=$(gh run list \
            --repo ${{ github.repository }} \
            --workflow=deploy.yml \
            --limit 10 \
            --json databaseId,createdAt,name \
            --jq '.[] | select(.createdAt > "${{ steps.trigger.outputs.start_time }}" and .name == "Deploy para ${{ matrix.sistema }}") | .databaseId' \
            | head -n 1)

          echo "run_id=$run_id"
          echo "run_id=$run_id" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Aguardar finalização do deploy
        if: steps.encontrar.outputs.run_id != ''
        run: |
          echo "Aguardando deploy com run_id ${{ steps.encontrar.outputs.run_id }}"
          gh run watch ${{ steps.encontrar.outputs.run_id }} --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
